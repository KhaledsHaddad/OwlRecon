#!/usr/bin/env python3
"""owl-krsy.py
GUI Recon & Scan Tool - Linux only
Features:
 - GUI (Tkinter) with black/green theme
 - Header with name and small owl icon
 - Tabs: Info, Web, DNS, Nmap, Utilities
 - Real functionality: whois, nmap, traceroute, robots, headers, dns queries
 - Results shown in GUI and saved to results/<target>__<module>.txt

Author: autogenerated
Display: khaled.s.haddad  |  khaledhaddad.tech
"""

import os
import sys
import threading
import subprocess
import shutil
import re
from datetime import datetime
from pathlib import Path

try:
    import tkinter as tk
    from tkinter import ttk, messagebox, filedialog
except Exception:
    print("Tkinter is required. Install python3-tk on Debian-based systems.")
    sys.exit(1)


try:
    import requests
    from bs4 import BeautifulSoup
    import dns.resolver
except Exception:
    # we'll check and prompt later
    requests = None
    BeautifulSoup = None
    dns = None


BASE_DIR = Path(__file__).resolve().parent
RESULTS_DIR = BASE_DIR / "results"
RESULTS_DIR.mkdir(exist_ok=True)

APP_TITLE = "OWL - khaled.s.haddad"
FOOTER = "khaledhaddad.tech"
OWL_ICON = "ðŸ¦‰"



def sanitize_filename(s: str) -> str:
    return re.sub(r"[^A-Za-z0-9._-]", "_", s)


def save_result(target: str, module: str, content: str) -> Path:
    fname = sanitize_filename(f"{target}__{module}.txt")
    path = RESULTS_DIR / fname
    header = f"# Target: {target}\n# Module: {module}\n# Generated: {datetime.utcnow().isoformat()}Z\n\n"
    with open(path, "w", encoding="utf-8") as f:
        f.write(header)
        f.write(content)
    return path


def run_cmd(cmd, timeout=None):
    try:
        proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, timeout=timeout)
        return proc.returncode, proc.stdout
    except subprocess.TimeoutExpired:
        return -1, "<timeout>"
    except Exception as e:
        return -2, str(e)



def do_whois(target):
    code, out = run_cmd(["whois", target])
    return out


def do_nmap_basic(target, ports="1-1024"):
    cmd = ["nmap", "-sS", "-Pn", "-p", ports, target]
    code, out = run_cmd(cmd, timeout=600)
    return out


def do_nmap_service_os(target):
    cmd = ["nmap", "-sV", "-O", "--osscan-guess", "-Pn", target]
    code, out = run_cmd(cmd, timeout=900)
    return out


def do_nmap_vuln(target):
    cmd = ["nmap", "--script", "vulners,vuln", "-sV", "-Pn", target]
    code, out = run_cmd(cmd, timeout=1200)
    return out


def do_traceroute(target):
    code, out = run_cmd(["traceroute", "-n", target], timeout=180)
    return out


def fetch_robots(url):
    if requests is None:
        return "requests not installed"
    if not url.startswith("http"):
        url = "http://" + url
    try:
        r = requests.get(url.rstrip('/') + '/robots.txt', timeout=8)
        return r.text
    except Exception as e:
        return f"Error fetching robots.txt: {e}"


def fetch_headers(url):
    if requests is None:
        return "requests not installed"
    if not url.startswith("http"):
        url = "http://" + url
    try:
        r = requests.head(url, timeout=8, allow_redirects=True)
        return '\n'.join([f"{k}: {v}" for k, v in r.headers.items()])
    except Exception as e:
        return f"Error fetching headers: {e}"


def grab_links(url):
    if requests is None or BeautifulSoup is None:
        return "requests/bs4 not installed"
    if not url.startswith("http"):
        url = "http://" + url
    try:
        r = requests.get(url, timeout=10)
        soup = BeautifulSoup(r.text, 'html.parser')
        links = set(a['href'] for a in soup.find_all('a', href=True))
        return '\n'.join(sorted(links))
    except Exception as e:
        return f"Error grabbing links: {e}"


def dns_records(domain):
    if dns is None:
        return "dnspython not installed"
    out = []
    resolver = dns.resolver.Resolver()
    types = ["A", "AAAA", "MX", "NS", "CNAME", "SOA", "TXT", "SRV"]
    for t in types:
        try:
            answers = resolver.resolve(domain, t, lifetime=5)
            for r in answers:
                out.append(f"{t}: {r.to_text()}")
        except Exception:
            continue
    return '\n'.join(out) if out else 'No records or query failed.'



class OwlApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title(APP_TITLE)
        self.geometry('980x660')
        self.configure(bg='black')
        self.create_styles()
        self.create_header()
        self.create_tabs()
        self.create_footer()

    def create_styles(self):
        style = ttk.Style(self)
        style.theme_use('clam')
        style.configure('TNotebook', background='black', borderwidth=0)
        style.configure('TNotebook.Tab', background='black', foreground='#00FF66', padding=8)
        style.map('TNotebook.Tab', background=[('selected', '#001100')])
        style.configure('TLabel', background='black', foreground='#00FF66')
        style.configure('TButton', background='black', foreground='#00FF66')
        style.configure('TFrame', background='black')

    def create_header(self):
        header = tk.Frame(self, bg='black')
        header.pack(fill='x', padx=8, pady=6)
        left = tk.Frame(header, bg='black')
        left.pack(side='left', anchor='w')
        lbl_icon = tk.Label(left, text=OWL_ICON, font=('Segoe UI Emoji', 20), bg='black', fg='#00FF66')
        lbl_icon.pack(side='left')
        lbl_title = tk.Label(left, text='  OWL - khaled.s.haddad', font=('Consolas', 18, 'bold'), bg='black', fg='#00FF66')
        lbl_title.pack(side='left')

        right = tk.Frame(header, bg='black')
        right.pack(side='right', anchor='e')
        self.status_var = tk.StringVar(value='Ready')
        lbl_status = tk.Label(right, textvariable=self.status_var, font=('Consolas', 10), bg='black', fg='#00FF66')
        lbl_status.pack()

    def create_tabs(self):
        notebook = ttk.Notebook(self)
        notebook.pack(fill='both', expand=True, padx=8, pady=(0,8))

        tab_info = ttk.Frame(notebook)
        notebook.add(tab_info, text='Info')
        self.build_info_tab(tab_info)

      
        tab_web = ttk.Frame(notebook)
        notebook.add(tab_web, text='Web')
        self.build_web_tab(tab_web)

        
        tab_dns = ttk.Frame(notebook)
        notebook.add(tab_dns, text='DNS')
        self.build_dns_tab(tab_dns)

        
        tab_nmap = ttk.Frame(notebook)
        notebook.add(tab_nmap, text='Nmap')
        self.build_nmap_tab(tab_nmap)

        tab_utils = ttk.Frame(notebook)
        notebook.add(tab_utils, text='Utilities')
        self.build_utils_tab(tab_utils)

    def create_footer(self):
        footer = tk.Frame(self, bg='black')
        footer.pack(fill='x', side='bottom', padx=8, pady=6)
        lbl = tk.Label(footer, text=FOOTER, font=('Consolas', 10), bg='black', fg='#00FF66')
        lbl.pack()

    # Tab builders
    def build_info_tab(self, parent):
        frm = tk.Frame(parent, bg='black')
        frm.pack(fill='both', expand=True, padx=8, pady=8)
        lbl = tk.Label(frm, text='Target (domain or IP):', bg='black', fg='#00FF66')
        lbl.pack(anchor='nw')
        self.info_target = tk.Entry(frm, bg='#001100', fg='#00FF66', insertbackground='#00FF66', font=('Consolas', 12))
        self.info_target.pack(fill='x', pady=4)

        btn_frame = tk.Frame(frm, bg='black')
        btn_frame.pack(fill='x', pady=6)
        btn_whois = tk.Button(btn_frame, text='WHOIS', command=lambda: self.threaded_action(self._whois), bg='#001100', fg='#00FF66')
        btn_whois.pack(side='left', padx=4)
        btn_tr = tk.Button(btn_frame, text='Traceroute', command=lambda: self.threaded_action(self._traceroute), bg='#001100', fg='#00FF66')
        btn_tr.pack(side='left', padx=4)

       
        self.info_text = tk.Text(frm, bg='black', fg='#00FF66', insertbackground='#00FF66')
        self.info_text.pack(fill='both', expand=True, pady=(8,0))

    def build_web_tab(self, parent):
        frm = tk.Frame(parent, bg='black')
        frm.pack(fill='both', expand=True, padx=8, pady=8)
        lbl = tk.Label(frm, text='Website (domain or URL):', bg='black', fg='#00FF66')
        lbl.pack(anchor='nw')
        self.web_target = tk.Entry(frm, bg='#001100', fg='#00FF66', insertbackground='#00FF66', font=('Consolas', 12))
        self.web_target.pack(fill='x', pady=4)

        btn_frame = tk.Frame(frm, bg='black')
        btn_frame.pack(fill='x', pady=6)
        tk.Button(btn_frame, text='Robots.txt', command=lambda: self.threaded_action(self._robots), bg='#001100', fg='#00FF66').pack(side='left', padx=4)
        tk.Button(btn_frame, text='Headers', command=lambda: self.threaded_action(self._headers), bg='#001100', fg='#00FF66').pack(side='left', padx=4)
        tk.Button(btn_frame, text='Grab Links', command=lambda: self.threaded_action(self._links), bg='#001100', fg='#00FF66').pack(side='left', padx=4)

        self.web_text = tk.Text(frm, bg='black', fg='#00FF66', insertbackground='#00FF66')
        self.web_text.pack(fill='both', expand=True, pady=(8,0))

    def build_dns_tab(self, parent):
        frm = tk.Frame(parent, bg='black')
        frm.pack(fill='both', expand=True, padx=8, pady=8)
        lbl = tk.Label(frm, text='Domain:', bg='black', fg='#00FF66')
        lbl.pack(anchor='nw')
        self.dns_target = tk.Entry(frm, bg='#001100', fg='#00FF66', insertbackground='#00FF66', font=('Consolas', 12))
        self.dns_target.pack(fill='x', pady=4)
        tk.Button(frm, text='Query DNS', command=lambda: self.threaded_action(self._dns), bg='#001100', fg='#00FF66').pack(pady=6)
        self.dns_text = tk.Text(frm, bg='black', fg='#00FF66', insertbackground='#00FF66')
        self.dns_text.pack(fill='both', expand=True, pady=(8,0))

    def build_nmap_tab(self, parent):
        frm = tk.Frame(parent, bg='black')
        frm.pack(fill='both', expand=True, padx=8, pady=8)
        lbl = tk.Label(frm, text='Target (domain or IP):', bg='black', fg='#00FF66')
        lbl.pack(anchor='nw')
        self.nmap_target = tk.Entry(frm, bg='#001100', fg='#00FF66', insertbackground='#00FF66', font=('Consolas', 12))
        self.nmap_target.pack(fill='x', pady=4)

        ports_frame = tk.Frame(frm, bg='black')
        ports_frame.pack(fill='x')
        tk.Label(ports_frame, text='Ports:', bg='black', fg='#00FF66').pack(side='left')
        self.ports_entry = tk.Entry(ports_frame, width=20, bg='#001100', fg='#00FF66', insertbackground='#00FF66')
        self.ports_entry.insert(0, '1-1024')
        self.ports_entry.pack(side='left', padx=6)

        btn_frame = tk.Frame(frm, bg='black')
        btn_frame.pack(fill='x', pady=6)
        tk.Button(btn_frame, text='Basic SYN Scan', command=lambda: self.threaded_action(self._nmap_basic), bg='#001100', fg='#00FF66').pack(side='left', padx=4)
        tk.Button(btn_frame, text='Service/OS Detect', command=lambda: self.threaded_action(self._nmap_service), bg='#001100', fg='#00FF66').pack(side='left', padx=4)
        tk.Button(btn_frame, text='Vuln Scan (scripts)', command=lambda: self.threaded_action(self._nmap_vuln), bg='#001100', fg='#00FF66').pack(side='left', padx=4)

        self.nmap_text = tk.Text(frm, bg='black', fg='#00FF66', insertbackground='#00FF66')
        self.nmap_text.pack(fill='both', expand=True, pady=(8,0))

    def build_utils_tab(self, parent):
        frm = tk.Frame(parent, bg='black')
        frm.pack(fill='both', expand=True, padx=8, pady=8)
        tk.Button(frm, text='Open results folder', command=self.open_results_folder, bg='#001100', fg='#00FF66').pack(anchor='w')
        tk.Button(frm, text='Check dependencies', command=self.check_dependencies, bg='#001100', fg='#00FF66').pack(anchor='w', pady=6)
        self.utils_text = tk.Text(frm, bg='black', fg='#00FF66', height=12, insertbackground='#00FF66')
        self.utils_text.pack(fill='both', expand=True, pady=(8,0))

    
    def threaded_action(self, func):
        t = threading.Thread(target=func, daemon=True)
        t.start()

 
    def set_status(self, s: str):
        self.status_var.set(s)

    def append_text(self, widget: tk.Text, text: str):
        widget.config(state='normal')
        widget.delete('1.0', tk.END)
        widget.insert(tk.END, text)
        widget.see(tk.END)
        widget.config(state='disabled')

   
    def _whois(self):
        target = self.info_target.get().strip()
        if not target:
            messagebox.showwarning('Input', 'Please provide a target')
            return
        self.set_status('Running WHOIS...')
        out = do_whois(target)
        save_result(target, 'whois', out)
        self.append_text(self.info_text, out)
        self.set_status('Ready')

    def _traceroute(self):
        target = self.info_target.get().strip()
        if not target:
            messagebox.showwarning('Input', 'Please provide a target')
            return
        self.set_status('Running traceroute...')
        out = do_traceroute(target)
        save_result(target, 'traceroute', out)
        self.append_text(self.info_text, out)
        self.set_status('Ready')

    def _robots(self):
        target = self.web_target.get().strip()
        if not target:
            messagebox.showwarning('Input', 'Please provide a website')
            return
        self.set_status('Fetching robots.txt...')
        out = fetch_robots(target)
        save_result(target, 'robots', out)
        self.append_text(self.web_text, out)
        self.set_status('Ready')

    def _headers(self):
        target = self.web_target.get().strip()
        if not target:
            messagebox.showwarning('Input', 'Please provide a website')
            return
        self.set_status('Fetching headers...')
        out = fetch_headers(target)
        save_result(target, 'headers', out)
        self.append_text(self.web_text, out)
        self.set_status('Ready')

    def _links(self):
        target = self.web_target.get().strip()
        if not target:
            messagebox.showwarning('Input', 'Please provide a website')
            return
        self.set_status('Grabbing links...')
        out = grab_links(target)
        save_result(target, 'links', out)
        self.append_text(self.web_text, out)
        self.set_status('Ready')

    def _dns(self):
        target = self.dns_target.get().strip()
        if not target:
            messagebox.showwarning('Input', 'Please provide a domain')
            return
        self.set_status('Querying DNS...')
        out = dns_records(target)
        save_result(target, 'dns', out)
        self.append_text(self.dns_text, out)
        self.set_status('Ready')

    def _nmap_basic(self):
        target = self.nmap_target.get().strip()
        ports = self.ports_entry.get().strip() or '1-1024'
        if not target:
            messagebox.showwarning('Input', 'Please provide a target')
            return
        self.set_status('Running Nmap basic scan...')
        out = do_nmap_basic(target, ports=ports)
        save_result(target, f'nmap_basic_{ports}', out)
        self.append_text(self.nmap_text, out)
        self.set_status('Ready')

    def _nmap_service(self):
        target = self.nmap_target.get().strip()
        if not target:
            messagebox.showwarning('Input', 'Please provide a target')
            return
        self.set_status('Running Nmap service/os detection...')
        out = do_nmap_service_os(target)
        save_result(target, 'nmap_service_os', out)
        self.append_text(self.nmap_text, out)
        self.set_status('Ready')

    def _nmap_vuln(self):
        target = self.nmap_target.get().strip()
        if not target:
            messagebox.showwarning('Input', 'Please provide a target')
            return
        self.set_status('Running Nmap vulnerability scripts...')
        out = do_nmap_vuln(target)
        save_result(target, 'nmap_vuln', out)
        self.append_text(self.nmap_text, out)
        self.set_status('Ready')

    def open_results_folder(self):
        try:
            os.system(f'xdg-open "{RESULTS_DIR}"')
        except Exception:
            messagebox.showinfo('Info', f'Results located at: {RESULTS_DIR}')

    def check_dependencies(self):
        lines = []
        deps = ['nmap', 'whois', 'traceroute']
        for d in deps:
            if shutil.which(d):
                lines.append(f"{d}: OK")
            else:
                lines.append(f"{d}: MISSING")
        pkgs = []
        if requests is None:
            pkgs.append('requests')
        if BeautifulSoup is None:
            pkgs.append('beautifulsoup4')
        if dns is None:
            pkgs.append('dnspython')
        if pkgs:
            lines.append('Python packages missing: ' + ', '.join(pkgs))
        else:
            lines.append('Python packages: OK')
        self.append_text(self.utils_text, '\n'.join(lines))



def main():
    if os.name != 'posix':
        print('This tool is intended for Linux systems.')
        sys.exit(1)
    app = OwlApp()
    app.mainloop()


if __name__ == '__main__':
    main()

